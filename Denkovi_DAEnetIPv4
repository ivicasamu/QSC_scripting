hostName = Controls['HostName'].String
community = Controls['Community'].String

snmp_connection = SNMPSession.New(SNMP.SessionType.v2c)
snmp_connection:setHostName(hostName)
snmp_connection:setCommunity(community)
snmp_connection:startSession()
 
function relayStatus()
  for i=1,16,1 do
    print(tonumber(Controls['State'][i].String))
    if(tonumber(Controls['State'][i].String)==0) then
      relayOFF(i)
    elseif(tonumber(Controls['State'][i].String)==1) then
      relayON(i)  
    end
  end
end

snmp_connection.EventHandler = function(response)
  print("state: "..response.Value)
end



snmp_connection.ErrorHandler = function(response)
	print(response.Error)
    if(response.Error == nil) then
    OKTimer:Stop(); OKTimer:Start(3)
    Controls['Connected'].Boolean = true; print('yay');
    local line = response.Error
    while line ~= nil do
      handleFeedback(line);
      line = sock:ReadLine(TcpSocket.EOL.Lf);
    end;
  else
    print(evt)
  end
end

-- Relay ON function
function relayON(i)
  Controls['Status'][i].String = "Relay ".. i-8 .. " ON"
  Controls['Status'][i].Color = "#007C00"
  Controls['Set'][i].Color = "#007C00"
  Controls['Release'][i].Color = "#7C7C7C"
end

-- Relay OFF function
function relayOFF(i)
  Controls['Status'][i].String = "Relay ".. i-8 .. " OFF"
  Controls['Status'][i].Color = "#FF0000"
  Controls['Release'][i].Color = "#FF0000"
  Controls['Set'][i].Color = "#7C7C7C"
end

-- Activate relay
for i,c in pairs(Controls['Set']) do
  if(tonumber(i) ~= nil) then
    c.EventHandler = function(c)
      snmp_connection:setRequest(".1.3.6.1.4.1.42505.1.2.3.1.11."..i-1, "1", SNMP.SNMPDataType.integer32, myCallback)
      relayON(i)
      --status(i)
    end;
  end;
end;

-- Deactivate relay
for i,c in pairs(Controls['Release']) do
  if(tonumber(i) ~= nil) then
    c.EventHandler = function(c)
      snmp_connection:setRequest(".1.3.6.1.4.1.42505.1.2.3.1.11."..i-1, "0", SNMP.SNMPDataType.integer32, myCallback)
      relayOFF(i)
      --status(i)
    end;
  end;
end;

-- Relay state timer
RelayStateTimer = Timer.New()
RelayStateTimer.EventHandler = function()
  relayStatus()
end
RelayStateTimer:Start(10)

snmp_connection.EventHandler = function(sock, evt, err)
  if(evt == TcpSocket.Events.Data) then
    OKTimer:Stop(); OKTimer:Start(3);
    Controls['Connected'].Boolean = true; print('yay');
    local line = sock:ReadLine(TcpSocket.EOL.Lf)
    while line ~= nil do
      handleFeedback(line);
      line = sock:ReadLine(TcpSocket.EOL.Lf);
      Controls['log'].String = line
    end;
  else
    print(evt)
  end
end
